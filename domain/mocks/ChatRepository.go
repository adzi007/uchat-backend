// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	domain "adzi-clean-architecture/domain"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// CreateNewChat provides a mock function with given fields: _a0
func (_m *ChatRepository) CreateNewChat(_a0 domain.Chat) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Chat) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChatRoomId provides a mock function with given fields: chatRoomId
func (_m *ChatRepository) GetChatRoomId(chatRoomId string) (*domain.Chat, error) {
	ret := _m.Called(chatRoomId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatRoomId")
	}

	var r0 *domain.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Chat, error)); ok {
		return rf(chatRoomId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Chat); ok {
		r0 = rf(chatRoomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatRoomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatRooms provides a mock function with given fields: userId
func (_m *ChatRepository) GetChatRooms(userId string) ([]*domain.Chat, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatRooms")
	}

	var r0 []*domain.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.Chat, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.Chat); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChat provides a mock function with given fields: _a0, _a1
func (_m *ChatRepository) SendChat(_a0 domain.ChatBubble, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.ChatBubble, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReadedChat provides a mock function with given fields: chatRoomId, chatBubbleId
func (_m *ChatRepository) SetReadedChat(chatRoomId string, chatBubbleId string) error {
	ret := _m.Called(chatRoomId, chatBubbleId)

	if len(ret) == 0 {
		panic("no return value specified for SetReadedChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(chatRoomId, chatBubbleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
